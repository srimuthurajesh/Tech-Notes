PHP - Hypertext-pre-processor
	- created by Rasmus Lerdorf in 1995
	- originally stood for Personal Home Page.
	- Interpreted language (no need to compile)
	- we need 3 things to run php 1) php parser(cgi or server module) 2)webserver 3)browser


<?php     ?> tell php parser to start and stop
<% %>, <script language=php > are deployed in previous versions
<? ?> it is not preferable, need to change short_open_tag in php.ini
-If a file is pure php code it is preferable to omit php closing tag at end of file
<?php echo "welcome to php"; ?>
<?php  ‘welcome to php’ ?>

//comments
/* block comments*/
#shell comments

IDENTIFIERS - Anything that has a value is called Identifier- total 77 - __halt_compiler(),abstract,and,array,as,break,callable,case,catch,class,clone,const,continue,declare,default,die(),dom,echo,else,elseif,empty(),enddeclare,endfor,endforeach,endif,endswitch,endwhile,eval(),exit(),extends,final,finally,,for,foreach,function,global,goto,include_once,instanceof,insteadof,interface,isset,list,namespace,new,or,print,private,protected,public,require,require_once,return 	static,switch,throw,trait,try,unset,use,var,while,xor,yield 	
DATAYPE : 	Loosely typed language, no datatypes syntax
			1.Scalar -
				a)int - whole number, equivalent C lang ‘long’ . 32Bit. –2,147,483,648 to +2,147,483,647. 
					can be written in decimal, hexadecimal (prefixed with 0x), and
					octal notation (prefixed with 0), and can include + / - signs
				b)float  - real number, eqv to C lang ‘double’. 2.2E–308 to 1.8E+308
				c)string, - series of char. $str="rajesh"; $str[1];  $str{1};	//a
					heredoc- $string = <<<EOK rajesh EOK;
				d)boolean -true or false, case sensitive, ((bool) other datatype) type-casting
			2.Compound – object,	
					b)array - collection of key/value pair
						   array use hash tables, which complexity is 0(1).
							
			3.special - a) null - variable with no value.
			 	   	it has been assigned the constant NULL.
						it has not been set to any value yet.
						it has been unset().	
				b) resource - 	special data type, represent a PHP extension resource such as a database query, an open file, a database connection, and lots of other external types. You will never directly use this type, but will pass to the relevant functions

			Indirect reference variable: $name="rajesh";    $$name="good boy";      echo $rajesh;
			we can declare variable without variable name.	//$var;
			isset() - determine if a variable is set and is not NULL
			unset() - undefined the variable
			empty() -  determine whether a variable is empty
			is_null() -  finds whether a variable is NULL

SCOPES:
	1.Global scope -> need global keyword
	2.local scope
	3.super global scope
	4.static
	$GLOBALS[] 	$name="rajesh";
				function getname(){
					echo $GLOBALS['name'];		//access outer variable inside function
				}getname();


TYPE JUGGLING:
	<?php
	$foo = "1";  // $foo is string (ASCII 49)
	$foo *= 2;   // $foo is now an integer (2)
	$foo = $foo * 1.3;  // $foo is now a float (2.6)
	$foo = 5 * "10 Little Piggies"; // $foo is integer (50)
	$foo = 5 * "10 Small Pigs";     // $foo is integer (50)
	?>

ARRAY:
	1.Indexed array- $varname=array(‘rajesh’,’arun’);
	2.Associate array- $varname=array(1=>’raj’,2=>’arun’); //userdefined key
	3.Multidimensional - $varname = array(2=>array(‘rajesh’))

CONSTANT : (globally accessible)	
		define(‘VAR_NAME,’rajesh’);  
		const VAR_NAME = ‘rajesh’;
	-can be called without object using scopr resolution operator.  eg.ClassName::VAR_NAME;
	-while extends, it is called using PARENT::var_name ,  SELF::var_name	

MAGIC CONSTANTS:
	__LINE__ 		return line number
	__FILE__		return filename
	__DIR__		return directory
	__FUNCTION__	return function name
	__CLASS__		return classname
	__TRAIT__		return trait name
	__METHOD__ 	return classname and function name
	__NAMESPACE__	return namespace name

OPERATORS:
	1. Arithmatic operator - +-*/%  a**2=a^2
	2.Assignment operator - +=  -=  *=  /=  %=
	3.Bitwise operator - &(and),|(or),^(xor),~(not),<<(swift left),>>(swift right)
	4.Comparision operator - == === (!=,<>) !== <,>,<=,>=,<=>
	5.Error control operator - @
	6.Executor operator – backticks (` `)
	7.Increment decrement – a++.a--.++a,--a
	8.Logical operator – and,or,!,xor,&&,||
	9.String operator - (.)concatenate dot operator
	10.Array operator - (+)union, (==)equal, ===, !=, <>,!==
	11.Type operator – (instanceof)     eg.objname instanceof classname

	Reference of(&): 	$b=10; $a = &$b;	echo $a;   //10	not a pointer,no new memory just pointing value	

CONDITIONAL:
1.if condition
	if ( condition ){
		body;
	}
2.if-else condition
	if ( condition ){
		body;
	} else {
		body;
	}
3.if-elseif condition
	if ( condition ){
		body;
	} elseif ( condition ){
		body;
	} else {
		body;
	}
4.switch
	switch ( expression ) {
		case value1:
			statement;
			break;
		case default:
			statement;
	}
5.Single line condition
	expression ? Statement1 : statement2;


LOOPS:
1.for loop
 	for ( intialisation; condition; inc/dec) {
		body;
	}
2.while loop
	while ( condition ) {
		body;
	}
3.do-while loop
	do {
 		body;
	} while ( condition )
4.foreach loop
	foreach ( $arrayname as $var) {			//foreach with value
		body;
	}
	foreach ( $arrayname as $key =>  $var){		//foreach with reference
		body; //we can use $key
	}
BREAKS: break; exit(); # totally exit from program die(); #stop when previous error
		goto varname; continue;

FUNCTION:
	function functionname ( $varname ) { body;}	#pass by value
	function functionname ( &$varname ) { body;}	#pass by reference
	function functionname  ( ...$varname ) { body; }	#variable length parameters
	function functionname ($varname=0) {body;}	#default arguements		
	-same function name should not repeat in php
	Return value by reference:
		function &get_global_variable($name) {
			return $GLOBALS[$name];	
		}
		$num = 10;
		$value =& get_global_variable("num");
		print $value . "\n";
		$value = 20;
		print $num;

	function chaining: $obj->func1()->func2();	// func1 should return $this

COOKIES: text files stored on client computer
	setcookie("cookiename","cookevalue","expirytime",path,url,https,httponly);
	secure way --> setcookie("cookiename","cookevalue","expirytime",'/',null,null,true);
	
	eg: setcookie("name","rajesh","time()-3600");
	$_COOKIE("cookiename");			//getcookies
	setcookie("cookiename",null,expirytime);	//remove cookie

SESSION: creates file in a temp folder in server, 32 hexadecimal number as unique id. A cookie called PHPSESSID is sent to client browser,
	session_start();	
	session_destroy();
	$_SESSION[‘varname’];

HTTP-superGlobals:
	$_GET[‘varname’];
	$_POST[‘varname’];
	$_REQUEST[‘varname’];

FILES HANDLING:
	<fom action="" method="post" enctype="multipart/form-data">
		<input type="file" name="image">
$_FILES[‘image’][‘name’],
$_FILES[‘image’][‘type’] 
$_FILES[‘image’][‘size’] 
move_upload_file($_FILES[‘image’][‘temp_name’],’target path’); 

REDIRECTION:
	header(‘Location’:’pagename.php’);
	header(‘Location’:$_SERVER[‘HTTP_REFERER’]);

FILE INCLUSION:
	include(‘filename’);		//throw error if file not exist
	include_once(‘filename’);	//should not repeat
	require(‘filename’);		//not throw error if file not exist
	require_once(‘filname’);	//should not repeat

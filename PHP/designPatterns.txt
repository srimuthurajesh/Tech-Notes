Singleton

<?php
   class Singleton {
      public static function getInstance() {
         static $instance = null;
         
         if (null === $instance) {
            $instance = new static();
         }
         return $instance;
      }
      protected function __construct() {
      }
      
      private function __clone() {
      }
      
      private function __wakeup() {
      }
   }
   
   class SingletonChild extends Singleton {
   }
   
   $obj = Singleton::getInstance();
   var_dump($obj === Singleton::getInstance());
   
   $anotherObj = SingletonChild::getInstance();
   var_dump($anotherObj === Singleton::getInstance());
   var_dump($anotherObj === SingletonChild::getInstance()); 
?>

Above Example implemented based on static method creation is getInstance()
Factory

A Class Simple Creates the object and you want to use that object, Following example will explain about factory design pattern.

<?php
   class Car {
      private $model;
      public function __construct($model) {
         $this->model = $model;
      }
      public function getDelivery() {
         return $this->model." ready";
      }
   }
   class Bike {
      private $model;
      public function __construct($model) {
         $this->model = $model;
      }
      public function getDelivery() {
         return $this->model." ready";
      }
   }
   
   class HondaFactory {
      public static function create($model) {
      	if($company == 'car')
	    	return new Car($model);
      	elseif($company == 'bike')
      		return new Bike($model);
      }
   }
   
   $car = HondaFactory::create('car');
   $bike = HondaFactory::create('bike');
   print_r($car->getDelivery());
   print_r($bike->getDelivery());
   
?>

The main difficulty with factory pattern is it will increase the complexity and it is not reliable for good programmers.
Strategy pattern

Strategy pattern makes a family algorithm and encapsulates each algorithm. Here each algorithm should be inter-changeable within the family.

<?php
   $elements = array(
      array(
         'id' => 2,
         'date' => '2011-01-01',
      ),
      array(
         'id' => 1,
         'date' => '2011-02-01'
      )
   );
   
   $collection = new ObjectCollection($elements);
   
   $collection->setComparator(new IdComparator());
   $collection->sort();
   
   echo "Sorted by ID:\n";
   print_r($collection->elements);
   
   $collection->setComparator(new DateComparator());
   $collection->sort();
   
   echo "Sorted by date:\n";
   print_r($collection->elements);
?>



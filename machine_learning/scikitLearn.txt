TRAINING AND TEST DATA:
	from sklearn.model_selection import train_test_spilt
	X_train,X_test,y_train,y_test = train_test_spilt(X, y, randome_state=0)

CREATE MODEL:
SUPERVISED LEARNING	
	LINEAR REGRESSION:
		from sklearn.linear_model import LinearRegression
		lr = LinearRegression(normalize=true)
	SUPPORT VECTOR MACHINES(SVM)
		from sklearn.svm import SVC
		svc = SVC(kernel='linear')
	NAIVE BAYES
		from sklearn.naive_bayes import GaussianNB
		gnb = GaussianNB()
	KNN
		from sklearn import neighbors
		knn = neightbors.KNeighborsClassifier(n_neightbors=5)

UNSUPERVISED LEARNING
	PRINCIPAL COMPONENT ANALYSIS(PCA)
		from sklearn.decomposition import PCA
		pca = PCA(n_components=0.95)	
	K MEANS	
		from sklearn.cluster import KMeans
		k_means = KMeans(n_clusters=4,random_state=0)


EVALUATE MODEL:
	CLASSIFICATION METRICS
		ACCURACY SCORE
			from sklearn.metrics import accuracy_score
			accuracy_score(y_test, y_pred)
		CLASSIFICATION REPORT
			from sklearn.metrics import classification_report
			classification_report(y_test, y_pred)
		CONFUSION MATRIX
			from sklearn.metrics import confusion_matrix
			confusion_matrix(y_test, y_pred)											
	
	REGRESSION METRICS
		MEAN ABSOLUTE ERROR
			from sklearn.metrics import mean_absolute_error
			mean_absolute_error(y_true, y_pred)
		MEANS SQUARED ERROR
			from sklearn.metrics import means_squared_error
			mean_squared_error(y_test, y_pred)
		ROOT MEAN SQUARED ERROR
			from sklearn.metrics import means_squared_error
			np.sqrt(mean_squared_error(true, pred))
		R SQUARE SCORE
			from sklearn.metrics import r2_score
			r2_score(y_true, y_pred)
	
	CLUSTERING METRICS
		ADJUSTED RAND INDEX
			from sklearn.metrics import adjusted_rand_score
			adjusted_rand_score(y_true, y_pred)
		HOMOGENEITY
			from sklearn.metrics import homogeneity_score
			homogeneity_score(y_true, y_pred)
		V-MEASURE
			from sklearn.metrices import v_measure_score
			metrices.v_measure_score(y_true, y_pred)		
	
	CROSS VALIDATION	
		from sklearn.cross_validation import cross_val_score
		cross_val_score(knn, X_train, y_train, cv=4)
		
TUNE MODEL:
	GRID SEARCH
		from sklearn.grid_search import GridSearchCV
		params = {"n_neighbors": np.arange(1,3), "metric": ["euclidean", "cityblock"]}
		grid = GridSearchCV(estimator=knn, param_grid=params)
		grid.fit(X_train, y_train)
		print(grid.best_score_)
		print(grid.best_estimator_.n_neighbors)
		
	RANDOMIZED PARAMETER OPTIMIZATION	
		from sklearn.grid_search import RandomizedSearchCV
		params = {"n_neighbors": range(1,5), "weights": ["uniform", "distance"]}
		rsearch = RandomizedSearchCV(estimator=knn, param_distributions=params, cv=4, n_iter=8, random_state=5)
		rsearch.fit(X_train, y_train)
		print(rsearch.best_score_)	
		
		
PICKLE:		
import pickle
#for writing the model to pickle file
with open('filename','wb') as f:
	pickle.dump(modelname,f)
#for reading the model from pickle file	
with open('filename','rb') as f:
	modelname = pickle.load(f)	
	
JOBLIB:	
#joblib is more faster for handling large numpy arrays
from sklearn.externals import joblib
joblib.dump(model,'joblib_filename')
joblib.load('joblib_filename')


LABEL ENCODER & ONE HOT ENCODING:
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df = le.fit_transform(df.columnName)	#will produce category numbers of the column
from sklearn.preprocessing import OneHotEncoder
oh = OneHotEncoder(categorical_features=[0])
X = oh.fit_transform(df).toarray()
X = X[:,1:]

			

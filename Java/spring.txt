SPRING
	-application dev framework for javaEE	
	-1998 -2002 by spring.org- Rod johnson
	-interface 21 - old name
	-called as framework of frameworks
Advantages: loosely coupling, lightweight, easy to test, flexible(configurable)

- builted by using 	1.Run time polymorphism 
			2.hasa relationship(interface)

MODULES IN SPRING:
	1.IOC - Spring core - basic, IOC & DI
	2.DAO - Data access/integration - Jdbc orm
	2.MVC - Web mvc - webservice, servlet, mvc pattern implementation, front controller 	 
	3.AOP - security, logging, profiling
	5.Test	- junit, testNG

IOC - is a container, at core of spring framework, create object, wire them, manage them, configure them
	1.Bean factory - lazy intialization, no annotated injection support
		 Resource resource=new ClassPathResource("applicationContext.xml");  
   		 BeanFactory factory=new XmlBeanFactory(resource);  	
	2.Application context - aggresive intialization, supports annotated injection 
		2a. ApplicationContext context = new FileSystemXmlApplicationContext("file.xml") - need to provide full path xml file
		    Employee employee = (Employee) context.getBean("employee");
		
		2b.ClassPathXmlApplicationContext - no need full path, but need to CLASSPATH properly
		2c.WebXmlApplicationContext - will load bean from within the web application

BEANFACTORY: 
	XmlBeanFactory beanFactory = new XmlBeanFactory(new ClassPathSource("spring.xml"));
	HelloWorld helloWorld = (HelloWorld)beanFactory.getBean("helloWorldBean");
	beanFactory.registerShutdownHook(); //we can see destroy-method execution 

	spring.xml
	<bean id="helloWolrdBean" class="com.package" init-method="callThisFunction" destroy-method="callThisFunction">
		<property name="name" value="muthu"/>	
	</bean>


Bean - Object inside spring container

LIFE CYCLE OF A BEAN : init-method, destroy-method
SCOPES IN BEAN: 
	1.singleton - only one instance for IOC
	2.prototype - each time a new instance created
	3.request - each http request a new instance created
	4.session - each http session a new instance created
	5.global session - each global http sesion a new instance created

INNER BEAN : when a bean use as a property of another bean. Always prototype.
BEAN AUTOWIRING : 1.no - default
		  2.byName  
		  3.byType  
		  4.construtor
		  5.autodirect

TWO WAYS DEPENDENCY INJECTION:
	1.Setter injection - for partial injection, override construtor injection
	2.Construtor injection - for mandatory dependencies, create new instance if modification done

CONFIG FILE:
	1.Xml based configuratiovn file
	2.Annotation based configuration
	3.Java based configuration
	
DISPATCHER SERVLET:- front controller & handles entire http request response
HANDLER MAPPING:- Helps to choose controller
			1.BeanNameUrlHandlerMapping
			2.SimpleUrlHandlerMapping
			3.ControllerClassNameHandlerMapping
			4.DefaultAnnotationHandlerMapping 
	
VIEW RESOLVER:- Maps view name to actual views
			1.InternalBasedViewResolver
			2.XmlViewResolver
			3.ResourceBundleViewResolver
			4.UrlBasedViewResolver
			5.VelocityViewResolver

SERVLET MAPPING : indicates which java servlet should used for the given url
			<servlet-mapping>
				<servlet-name>dispatcher-search</servlet-name>
				<url-pattern>/search</url-pattern>			
			</servlet-mapping>
ANNOTATION- metadata for class, alternate to xml
@Component - register the class in context as bean
@Autowired - perform DI
		
@Controller - marks class as controller
@RequestMapping - map url to class or method
@GetMapping - shortcut for @RequestMapping(method=RequestMethod.GET)
@ModelAttribute
@SessionAttribute
@PathVariable
@scope(value="prototype") - mention which type of DI need to implement
@Qualifier(emp1) - situation occur with two bean with same type so to seperate, so remove ambiguty unique id added. 
	
SPRING BOOT 
	- embedded httpService & tomcat 
	- comes with spring boot cli
	- autoconfiguration
Way to intialize spring boot project
	- maven , springBoot cli , springBoot intializer, springBoot project wizard
Sources of external configuration
	- application.properties, commandLine properties, profile specific properties
Spring Actuators -  to debug project via Rest points.
@springBootApplication
@Configuration
@EnableAutoConfiguration
@ComponentScan

maven pom.xml - spring-boot-starter-web
In application.properties file we need to add below configs
	server.port=8080

HIBERNATE
---------------------------------------------------------------------------------
ORM - object relational mapping is connecting object code with relation database
JPA - is a guidelines, for all orm to follow same method names

CORE INTERFACES OF HIBERNATE:
1.session: 	short live, single threaded.
		Session session = sesionFactory.openSession();
2.sessionFactory:	 provide many sessions
			 SessionFactory sesionFactory = configuration.buildSessionFactory();
3.configuration : Annotationconfiguration provides database passsword,dialect etc from xml file
		  hibernate.dialect
		  hibernate.connection.url
		  hibernate.connection.username
		  hibernate.connection.password
		  hibernate.connection.pool.size - limit number of connection waiting in hibernate
		  hibernate.hbm2ddl.auto=create,update
                  hibernate.show_sql= true,false		
4.transaction : abstarct of jdbc, jta transaction
5.Query&criteria : to perform query
